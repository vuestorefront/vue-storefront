{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.36.4",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@vue-storefront/sdk!",
  "docComment": "",
  "name": "@vue-storefront/sdk",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@vue-storefront/sdk!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!AnyFunction:type",
          "docComment": "/**\n * AnyFunction type represents a function that accepts any number of arguments and returns any type of value. It is used for the connector methods, interceptors, overrides and extensions for which we don't know the exact types.\n *\n * @example\n *\n * const fn: AnyFunction = (a, b) => a + b;\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyFunction = "
            },
            {
              "kind": "Content",
              "text": "(...args: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<any>) => any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "AnyFunction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!BaseConfig:type",
          "docComment": "/**\n * Base configuration object for HTTP requests. It includes essential configurations like the HTTP method.\n *\n * @remarks\n *\n * This type serves as a base for more detailed configuration objects by specifying the method of the HTTP request.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type BaseConfig = "
            },
            {
              "kind": "Content",
              "text": "{\n    method?: \"GET\" | \"POST\";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/types.ts",
          "releaseTag": "Public",
          "name": "BaseConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/sdk!buildModule:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function buildModule<InitializedModule extends "
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": ", Options extends "
            },
            {
              "kind": "Reference",
              "text": "ModuleOptions",
              "canonicalReference": "@vue-storefront/sdk!ModuleOptions:type"
            },
            {
              "kind": "Content",
              "text": ", InitializedExtension extends "
            },
            {
              "kind": "Reference",
              "text": "Extension",
              "canonicalReference": "@vue-storefront/sdk!Extension:type"
            },
            {
              "kind": "Content",
              "text": "<InitializedModule>"
            },
            {
              "kind": "Content",
              "text": ", ExtensionOptions extends "
            },
            {
              "kind": "Reference",
              "text": "ModuleOptions",
              "canonicalReference": "@vue-storefront/sdk!ModuleOptions:type"
            },
            {
              "kind": "Content",
              "text": ">(module: "
            },
            {
              "kind": "Reference",
              "text": "ModuleInitializerWithMandatoryOptions",
              "canonicalReference": "@vue-storefront/sdk!ModuleInitializerWithMandatoryOptions:type"
            },
            {
              "kind": "Content",
              "text": "<InitializedModule, Options>"
            },
            {
              "kind": "Content",
              "text": ", moduleOptions: "
            },
            {
              "kind": "Content",
              "text": "Options"
            },
            {
              "kind": "Content",
              "text": ", extension?: "
            },
            {
              "kind": "Reference",
              "text": "ExtensionInitializer",
              "canonicalReference": "@vue-storefront/sdk!ExtensionInitializer:type"
            },
            {
              "kind": "Content",
              "text": "<InitializedModule, InitializedExtension, ExtensionOptions> | InitializedExtension"
            },
            {
              "kind": "Content",
              "text": ", extensionOptions?: "
            },
            {
              "kind": "Content",
              "text": "ExtensionOptions"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "InitializedModule & InitializedExtension"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/buildModule.ts",
          "returnTypeTokenRange": {
            "startIndex": 20,
            "endIndex": 21
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "module",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "isOptional": false
            },
            {
              "parameterName": "moduleOptions",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": false
            },
            {
              "parameterName": "extension",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 17
              },
              "isOptional": true
            },
            {
              "parameterName": "extensionOptions",
              "parameterTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 19
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "InitializedModule",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Options",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "InitializedExtension",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ExtensionOptions",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "buildModule"
        },
        {
          "kind": "Function",
          "canonicalReference": "@vue-storefront/sdk!buildModule:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare function buildModule<InitializedModule extends "
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": ", Options extends "
            },
            {
              "kind": "Reference",
              "text": "ModuleOptions",
              "canonicalReference": "@vue-storefront/sdk!ModuleOptions:type"
            },
            {
              "kind": "Content",
              "text": ", InitializedExtension extends "
            },
            {
              "kind": "Reference",
              "text": "Extension",
              "canonicalReference": "@vue-storefront/sdk!Extension:type"
            },
            {
              "kind": "Content",
              "text": "<InitializedModule>"
            },
            {
              "kind": "Content",
              "text": ", ExtensionOptions extends "
            },
            {
              "kind": "Reference",
              "text": "ModuleOptions",
              "canonicalReference": "@vue-storefront/sdk!ModuleOptions:type"
            },
            {
              "kind": "Content",
              "text": ">(module: "
            },
            {
              "kind": "Reference",
              "text": "ModuleInitializer",
              "canonicalReference": "@vue-storefront/sdk!ModuleInitializer:type"
            },
            {
              "kind": "Content",
              "text": "<InitializedModule, Options>"
            },
            {
              "kind": "Content",
              "text": ", moduleOptions?: "
            },
            {
              "kind": "Content",
              "text": "Options"
            },
            {
              "kind": "Content",
              "text": ", extension?: "
            },
            {
              "kind": "Reference",
              "text": "ExtensionInitializer",
              "canonicalReference": "@vue-storefront/sdk!ExtensionInitializer:type"
            },
            {
              "kind": "Content",
              "text": "<InitializedModule, InitializedExtension, ExtensionOptions> | InitializedExtension"
            },
            {
              "kind": "Content",
              "text": ", extensionOptions?: "
            },
            {
              "kind": "Content",
              "text": "ExtensionOptions"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "InitializedModule & InitializedExtension"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/buildModule.ts",
          "returnTypeTokenRange": {
            "startIndex": 20,
            "endIndex": 21
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "module",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "isOptional": false
            },
            {
              "parameterName": "moduleOptions",
              "parameterTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "isOptional": true
            },
            {
              "parameterName": "extension",
              "parameterTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 17
              },
              "isOptional": true
            },
            {
              "parameterName": "extensionOptions",
              "parameterTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 19
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "InitializedModule",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Options",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "InitializedExtension",
              "constraintTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "ExtensionOptions",
              "constraintTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "buildModule"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!ComputedConfig:type",
          "docComment": "/**\n * Computed configuration for HTTP requests, derived from `RequestConfig`. Normalizes header values to strings for consistent request formatting.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ComputedConfig = "
            },
            {
              "kind": "Reference",
              "text": "BaseConfig",
              "canonicalReference": "@vue-storefront/sdk!BaseConfig:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    headers?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/types.ts",
          "releaseTag": "Public",
          "name": "ComputedConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!Connector:type",
          "docComment": "/**\n * Connector returns all methods that are exposed by the module.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Connector = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "AnyFunction",
              "canonicalReference": "@vue-storefront/sdk!AnyFunction:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "Connector",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!EndpointsConstraint:type",
          "docComment": "/**\n * Represents the constraint for API endpoint functions within the SDK. Each endpoint function must return a Promise, allowing for asynchronous operations.\n *\n * @example\n * ```typescript\n * // Definition of an API endpoint structure\n * type Endpoints = {\n *   getUser: ({ id: string }) => Promise<User>;\n *   createUser: (userDetails: CreateUserDetails) => Promise<User>;\n * };\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EndpointsConstraint = "
            },
            {
              "kind": "Content",
              "text": "{\n    [key: string]: "
            },
            {
              "kind": "Reference",
              "text": "AnyFunction",
              "canonicalReference": "@vue-storefront/sdk!AnyFunction:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/types.ts",
          "releaseTag": "Public",
          "name": "EndpointsConstraint",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!ErrorHandler:type",
          "docComment": "/**\n * Defines a generic error handler function type. This abstraction allows for custom error handling logic, which can be implemented by the consumer of the HTTP client.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ErrorHandler = "
            },
            {
              "kind": "Content",
              "text": "(context: "
            },
            {
              "kind": "Reference",
              "text": "ErrorHandlerContext",
              "canonicalReference": "@vue-storefront/sdk!ErrorHandlerContext:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/types.ts",
          "releaseTag": "Public",
          "name": "ErrorHandler",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!ErrorHandlerContext:type",
          "docComment": "/**\n * Provides context for error handling, encapsulating details relevant to the failed HTTP request.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ErrorHandlerContext = "
            },
            {
              "kind": "Content",
              "text": "{\n    error: unknown;\n    methodName: string;\n    url: string;\n    params: unknown[];\n    config: "
            },
            {
              "kind": "Reference",
              "text": "ComputedConfig",
              "canonicalReference": "@vue-storefront/sdk!ComputedConfig:type"
            },
            {
              "kind": "Content",
              "text": ";\n    httpClient: "
            },
            {
              "kind": "Reference",
              "text": "HTTPClient",
              "canonicalReference": "@vue-storefront/sdk!HTTPClient:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/types.ts",
          "releaseTag": "Public",
          "name": "ErrorHandlerContext",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!EventCallback:type",
          "docComment": "/**\n * EventCallback is a function that is called when an event is emitted.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type EventCallback = "
            },
            {
              "kind": "Content",
              "text": "<T>(...data: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<T>) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "EventCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@vue-storefront/sdk!eventManager:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "eventManager: "
            },
            {
              "kind": "Reference",
              "text": "EventManager",
              "canonicalReference": "@vue-storefront/sdk!~EventManager:class"
            }
          ],
          "fileUrlPath": "src/events/EventManager.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "eventManager",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!Extension:type",
          "docComment": "/**\n * Extension Type represents the extension configuration. It provides extensibility mechanisms like interceptors, extensions, overrides, and pub/sub manager.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Extension<ExtendedModule extends "
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": ">, \"connector\" | \"context\"> & {\n    extend?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "AnyFunction",
              "canonicalReference": "@vue-storefront/sdk!AnyFunction:type"
            },
            {
              "kind": "Content",
              "text": ">;\n    override?: "
            },
            {
              "kind": "Reference",
              "text": "ModuleOverride",
              "canonicalReference": "@vue-storefront/sdk!~ModuleOverride:type"
            },
            {
              "kind": "Content",
              "text": "<ExtendedModule[\"connector\"]>;\n    interceptors?: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "InterceptorsConfig",
              "canonicalReference": "@vue-storefront/sdk!InterceptorsConfig:type"
            },
            {
              "kind": "Content",
              "text": ">;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "Extension",
          "typeParameters": [
            {
              "typeParameterName": "ExtendedModule",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 19
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!ExtensionInitializer:type",
          "docComment": "/**\n * ExtensionInitializer Type represents a function accepting extension options as an argument and returning the actual extension.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ExtensionInitializer<ExtendedModule extends "
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": ", InitializedExtension extends "
            },
            {
              "kind": "Reference",
              "text": "Extension",
              "canonicalReference": "@vue-storefront/sdk!Extension:type"
            },
            {
              "kind": "Content",
              "text": "<ExtendedModule>"
            },
            {
              "kind": "Content",
              "text": ", Options extends "
            },
            {
              "kind": "Reference",
              "text": "ModuleOptions",
              "canonicalReference": "@vue-storefront/sdk!ModuleOptions:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(options?: Options, parent?: {\n    methods: ExtendedModule[\"connector\"];\n    context?: ExtendedModule[\"context\"];\n}) => InitializedExtension"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "ExtensionInitializer",
          "typeParameters": [
            {
              "typeParameterName": "ExtendedModule",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "InitializedExtension",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Options",
              "constraintTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@vue-storefront/sdk!getRequestSender:var",
          "docComment": "/**\n * Generates a `RequestSender` function configured according to the provided options.\n *\n * @remarks\n *\n * This function abstracts away the details of constructing request URLs, merging configurations, handling errors, and executing HTTP requests.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getRequestSender: "
            },
            {
              "kind": "Content",
              "text": "(options: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "@vue-storefront/sdk!Options:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "RequestSender",
              "canonicalReference": "@vue-storefront/sdk!RequestSender:type"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/utils/getRequestSender.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "getRequestSender",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@vue-storefront/sdk!handleError:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "handleError: "
            },
            {
              "kind": "Content",
              "text": "(err: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "SDKError",
              "canonicalReference": "@vue-storefront/sdk!~SDKError:class"
            }
          ],
          "fileUrlPath": "src/error.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "handleError",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!HTTPClient:type",
          "docComment": "/**\n * A customizable HTTP client function for making HTTP requests.\n *\n * @remarks\n *\n * This type represents a flexible interface for HTTP clients within the SDK, allowing for customization and substitution of different HTTP request mechanisms (e.g., Fetch API, Axios).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type HTTPClient = "
            },
            {
              "kind": "Content",
              "text": "(\nurl: string, \nparams: unknown[], \nconfig?: "
            },
            {
              "kind": "Reference",
              "text": "ComputedConfig",
              "canonicalReference": "@vue-storefront/sdk!ComputedConfig:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/types.ts",
          "releaseTag": "Public",
          "name": "HTTPClient",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!InitFunction:type",
          "docComment": "/**\n * InitFunction is a function that is called when the module is initialized. It contains the module options that is passed to the module and returns the module.\n *\n * @example\n *\n * const MyModule: InitFunction<Module> = (opts) => { // Do something with the options return { connector: { method1: () => {}, }, } }\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InitFunction<T> = "
            },
            {
              "kind": "Content",
              "text": "(opts?: any) => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "InitFunction",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@vue-storefront/sdk!initSDK:var",
          "docComment": "/**\n * Initializes SDK\n *\n * @param sdkConfig - SDK configuration\n *\n * @example\n *\n * This is an example of how to initialize SDK Providing generic type is required to get proper type inference.\n * ```typescript\n * const sdkConfig = {\n *   module1: buildModule<Module1, typeof extension>(module1, {}, extension),\n *   module2: buildModule<Module2>(module2),\n * };\n *\n * const sdk = initSDK<typeof sdkConfig>(sdkConfig);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "initSDK: "
            },
            {
              "kind": "Content",
              "text": "<T extends "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, import(\"./types\")."
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, import(\"./types\")."
            },
            {
              "kind": "Reference",
              "text": "Extension",
              "canonicalReference": "@vue-storefront/sdk!Extension:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"./types\")."
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": ">>>>(sdkConfig: T) => "
            },
            {
              "kind": "Reference",
              "text": "SDKApi",
              "canonicalReference": "@vue-storefront/sdk!SDKApi:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            }
          ],
          "fileUrlPath": "src/bootstrap.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "initSDK",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@vue-storefront/sdk!initVSFSDK:var",
          "docComment": "/**\n * An old alias for initSDK function.\n *\n * @deprecated\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "initVSFSDK: "
            },
            {
              "kind": "Content",
              "text": "<T extends "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, import(\"./types\")."
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, import(\"./types\")."
            },
            {
              "kind": "Reference",
              "text": "Extension",
              "canonicalReference": "@vue-storefront/sdk!Extension:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"./types\")."
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": ">>>>(sdkConfig: T) => import(\"./types\")."
            },
            {
              "kind": "Reference",
              "text": "SDKApi",
              "canonicalReference": "@vue-storefront/sdk!SDKApi:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            }
          ],
          "fileUrlPath": "src/api-extractor-data.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "initVSFSDK",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!Interceptor:type",
          "docComment": "/**\n * Alias for the AnyFunction type. Used in the context of interceptors.\n *\n * @see\n *\n * AnyFunction\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Interceptor = "
            },
            {
              "kind": "Reference",
              "text": "AnyFunction",
              "canonicalReference": "@vue-storefront/sdk!AnyFunction:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "Interceptor",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!InterceptorArgsAfter:type",
          "docComment": "/**\n * Utility type that defines the type of arguments that are passed to the `after` interceptor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InterceptorArgsAfter<RESULT extends "
            },
            {
              "kind": "Reference",
              "text": "AnyFunction",
              "canonicalReference": "@vue-storefront/sdk!AnyFunction:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Awaited",
              "canonicalReference": "!Awaited:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<RESULT>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "InterceptorArgsAfter",
          "typeParameters": [
            {
              "typeParameterName": "RESULT",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!InterceptorArgsBefore:type",
          "docComment": "/**\n * Utility type that defines the type of arguments that are passed to the `before` interceptor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InterceptorArgsBefore<ARGS extends "
            },
            {
              "kind": "Reference",
              "text": "AnyFunction",
              "canonicalReference": "@vue-storefront/sdk!AnyFunction:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<ARGS>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "InterceptorArgsBefore",
          "typeParameters": [
            {
              "typeParameterName": "ARGS",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!InterceptorResultAfter:type",
          "docComment": "/**\n * Utility type that defines the type of the result that is returned from the `after` interceptor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InterceptorResultAfter<RESULT extends "
            },
            {
              "kind": "Reference",
              "text": "AnyFunction",
              "canonicalReference": "@vue-storefront/sdk!AnyFunction:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<RESULT>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "InterceptorResultAfter",
          "typeParameters": [
            {
              "typeParameterName": "RESULT",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!InterceptorResultBefore:type",
          "docComment": "/**\n * Utility type that defines the type of the result that is returned from the `before` interceptor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InterceptorResultBefore<ARGS extends "
            },
            {
              "kind": "Reference",
              "text": "AnyFunction",
              "canonicalReference": "@vue-storefront/sdk!AnyFunction:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<ARGS>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "InterceptorResultBefore",
          "typeParameters": [
            {
              "typeParameterName": "ARGS",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!InterceptorsConfig:type",
          "docComment": "/**\n * InterceptorsConfig represents the configuration of the interceptors. It is a map of the interceptor type to the map of the method name to the interceptor.\n *\n * @example\n *\n * const interceptorsConfig: InterceptorsConfig = { before: { method1: [interceptor1, interceptor2], method2: interceptor3, }, after: { method1: [interceptor1, interceptor2], method2: interceptor3, }, around: { method1: [interceptor1, interceptor2], method2: interceptor3, }, };\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InterceptorsConfig = "
            },
            {
              "kind": "Content",
              "text": "{\n    [type in "
            },
            {
              "kind": "Reference",
              "text": "InterceptorType",
              "canonicalReference": "@vue-storefront/sdk!InterceptorType:type"
            },
            {
              "kind": "Content",
              "text": "]?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "Interceptor",
              "canonicalReference": "@vue-storefront/sdk!Interceptor:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Interceptor",
              "canonicalReference": "@vue-storefront/sdk!Interceptor:type"
            },
            {
              "kind": "Content",
              "text": "> | undefined>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "InterceptorsConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!InterceptorType:type",
          "docComment": "/**\n * InterceptorType represents the type of the interceptor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type InterceptorType = "
            },
            {
              "kind": "Content",
              "text": "\"before\" | \"after\" | \"around\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "InterceptorType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!MethodConfig:type",
          "docComment": "/**\n * Configuration specific to a method, merging `RequestConfig` with an internal flag. Indicates that the configuration is ready for making a request.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type MethodConfig = "
            },
            {
              "kind": "Reference",
              "text": "RequestConfig",
              "canonicalReference": "@vue-storefront/sdk!RequestConfig:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    ["
            },
            {
              "kind": "Reference",
              "text": "isConfig",
              "canonicalReference": "@vue-storefront/sdk!~isConfig:var"
            },
            {
              "kind": "Content",
              "text": "]: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/types.ts",
          "releaseTag": "Public",
          "name": "MethodConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!Methods:type",
          "docComment": "/**\n * Final type for the SDK methods.\n *\n * It requires the `Endpoints` interface to be provided.\n *\n * Based on this interface it will generate the methods with the correct parameters and return types.\n *\n * To each endpoint, it will add the `config` parameter with the `MethodConfig` type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Methods<Endpoints extends "
            },
            {
              "kind": "Reference",
              "text": "EndpointsConstraint",
              "canonicalReference": "@vue-storefront/sdk!EndpointsConstraint:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [Key in keyof Endpoints]: (...params: [..."
            },
            {
              "kind": "Reference",
              "text": "Parameters",
              "canonicalReference": "!Parameters:type"
            },
            {
              "kind": "Content",
              "text": "<Endpoints[Key]>, config?: "
            },
            {
              "kind": "Reference",
              "text": "MethodConfig",
              "canonicalReference": "@vue-storefront/sdk!MethodConfig:type"
            },
            {
              "kind": "Content",
              "text": "]) => "
            },
            {
              "kind": "Reference",
              "text": "ReturnType",
              "canonicalReference": "!ReturnType:type"
            },
            {
              "kind": "Content",
              "text": "<Endpoints[Key]>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/types.ts",
          "releaseTag": "Public",
          "name": "Methods",
          "typeParameters": [
            {
              "typeParameterName": "Endpoints",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 10
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@vue-storefront/sdk!middlewareModule:var",
          "docComment": "/**\n * `middlewareModule` is allowing to communicate with the Server Middleware API.\n *\n * It generates the methods to communicate with the API based on the provided endpoints interface.\n *\n * @example\n *\n * Setup:\n * ```ts\n * import { createSdk } from \"@vue-storefront/next\";\n * import type { SapccEndpoints } from \"../storefront-middleware/types\";\n *\n * export const { getSdk } = createSdk(options, ({ buildModule, middlewareModule }) => ({\n *   sapcc: buildModule(middlewareModule<SapccEndpoints>, {\n *     apiUrl: \"http://localhost:4000/sapcc\",\n *   }),\n * }));\n * ```\n *\n * It also exposes the `context` with the `requestSender` to allow to use it directly in extensions.\n *\n * @example\n *\n * Usage:\n * ```ts\n * import { createSdk } from \"@vue-storefront/next\";\n * import type { SapccEndpoints } from \"../storefront-middleware/types\";\n *\n * const extension = (extensionOptions, { methods, context }) => ({\n *   extend: {\n *     async newMethod(params) {\n *       const response = await context.requestSender(\"customMethod\", [params]);\n *       const products = await methods.getProducts(params);\n *       return { ...response, ...products };\n *     }\n *   }\n * });\n *\n * export const { getSdk } = createSdk(options, ({ buildModule, middlewareModule }) => ({\n *   sapcc: buildModule(middlewareModule<SapccEndpoints>, {\n *     apiUrl: \"http://localhost:4000/sapcc\",\n *   }, extension),\n * }));\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "middlewareModule: "
            },
            {
              "kind": "Content",
              "text": "<Endpoints extends "
            },
            {
              "kind": "Reference",
              "text": "EndpointsConstraint",
              "canonicalReference": "@vue-storefront/sdk!EndpointsConstraint:type"
            },
            {
              "kind": "Content",
              "text": ">(options: "
            },
            {
              "kind": "Reference",
              "text": "Options",
              "canonicalReference": "@vue-storefront/sdk!Options:type"
            },
            {
              "kind": "Content",
              "text": ") => {\n    connector: import(\"./types\")."
            },
            {
              "kind": "Reference",
              "text": "Methods",
              "canonicalReference": "@vue-storefront/sdk!Methods:type"
            },
            {
              "kind": "Content",
              "text": "<Endpoints>;\n    context: {\n        requestSender: import(\"./types\")."
            },
            {
              "kind": "Reference",
              "text": "RequestSender",
              "canonicalReference": "@vue-storefront/sdk!RequestSender:type"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n}"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/module.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "middlewareModule",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!Module:type",
          "docComment": "/**\n * Module Type represents the module configuration. It is a pluggable piece of code in a standalone package. Module can be a subject of interceptors, overrides and extensions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Module = "
            },
            {
              "kind": "Content",
              "text": "{\n    connector: "
            },
            {
              "kind": "Reference",
              "text": "Connector",
              "canonicalReference": "@vue-storefront/sdk!Connector:type"
            },
            {
              "kind": "Content",
              "text": ";\n    utils?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>;\n    subscribers?: "
            },
            {
              "kind": "Reference",
              "text": "Subscribers",
              "canonicalReference": "@vue-storefront/sdk!Subscribers:type"
            },
            {
              "kind": "Content",
              "text": ";\n    context?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "Module",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!ModuleInitializer:type",
          "docComment": "/**\n * ModuleInitializer Type represents a function accepting optional module options as an argument and returning the actual module.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ModuleInitializer<InitializedModule extends "
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": ", Options extends "
            },
            {
              "kind": "Reference",
              "text": "ModuleOptions",
              "canonicalReference": "@vue-storefront/sdk!ModuleOptions:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(options?: Options) => InitializedModule"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "ModuleInitializer",
          "typeParameters": [
            {
              "typeParameterName": "InitializedModule",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Options",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!ModuleInitializerWithMandatoryOptions:type",
          "docComment": "/**\n * StrictModuleInitializer Type represents a function accepting mandatory module options as an argument and returning the actual module.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ModuleInitializerWithMandatoryOptions<InitializedModule extends "
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": ", Options extends "
            },
            {
              "kind": "Reference",
              "text": "ModuleOptions",
              "canonicalReference": "@vue-storefront/sdk!ModuleOptions:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(options: Options) => InitializedModule"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "ModuleInitializerWithMandatoryOptions",
          "typeParameters": [
            {
              "typeParameterName": "InitializedModule",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Options",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!ModuleOptions:type",
          "docComment": "/**\n * ModuleOptions Type represents a generic module options object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ModuleOptions = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "ModuleOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!Options:type",
          "docComment": "/**\n * Options for the `middlewareModule`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Options = "
            },
            {
              "kind": "Content",
              "text": "{\n    apiUrl: string;\n    ssrApiUrl?: string;\n    httpClient?: "
            },
            {
              "kind": "Reference",
              "text": "HTTPClient",
              "canonicalReference": "@vue-storefront/sdk!HTTPClient:type"
            },
            {
              "kind": "Content",
              "text": ";\n    defaultRequestConfig?: "
            },
            {
              "kind": "Reference",
              "text": "RequestConfig",
              "canonicalReference": "@vue-storefront/sdk!RequestConfig:type"
            },
            {
              "kind": "Content",
              "text": ";\n    errorHandler?: "
            },
            {
              "kind": "Reference",
              "text": "ErrorHandler",
              "canonicalReference": "@vue-storefront/sdk!ErrorHandler:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/types.ts",
          "releaseTag": "Public",
          "name": "Options",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@vue-storefront/sdk!prepareConfig:var",
          "docComment": "/**\n * Prepare the config for the request. It's used to differentiate the method config from the params.\n *\n * @example\n *\n * Usage\n * ```ts\n * import { prepareConfig } from \"@vue-storefront/sdk\";\n *\n * const products = sdk.commerce.getProducts(params, prepareConfig({ method: \"GET\" }));\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "prepareConfig: "
            },
            {
              "kind": "Content",
              "text": "<CustomConfig extends "
            },
            {
              "kind": "Reference",
              "text": "RequestConfig",
              "canonicalReference": "@vue-storefront/sdk!RequestConfig:type"
            },
            {
              "kind": "Content",
              "text": " = "
            },
            {
              "kind": "Reference",
              "text": "RequestConfig",
              "canonicalReference": "@vue-storefront/sdk!RequestConfig:type"
            },
            {
              "kind": "Content",
              "text": ">(requestConfig: CustomConfig) => "
            },
            {
              "kind": "Reference",
              "text": "MethodConfig",
              "canonicalReference": "@vue-storefront/sdk!MethodConfig:type"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/utils/prepareConfig.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "prepareConfig",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!RequestConfig:type",
          "docComment": "/**\n * User-defined configuration for HTTP requests, extending `BaseConfig`. Allows custom headers, supporting both strings and arrays of strings for header values.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RequestConfig = "
            },
            {
              "kind": "Reference",
              "text": "BaseConfig",
              "canonicalReference": "@vue-storefront/sdk!BaseConfig:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    headers?: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, string | string[]>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/types.ts",
          "releaseTag": "Public",
          "name": "RequestConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!RequestSender:type",
          "docComment": "/**\n * Represents a function type for sending HTTP requests, abstracting the complexity of request configuration.\n *\n * @remarks\n *\n * This type is created via a factory function that configures it with common settings, such as base URLs and default headers.\n *\n * It simplifies making HTTP requests by handling URL construction, parameter serialization, and applying default and overridden configurations.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RequestSender = "
            },
            {
              "kind": "Content",
              "text": "(\nmethodName: string, \nparams: unknown[], \nconfig?: "
            },
            {
              "kind": "Reference",
              "text": "RequestConfig",
              "canonicalReference": "@vue-storefront/sdk!RequestConfig:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/modules/middlewareModule/types.ts",
          "releaseTag": "Public",
          "name": "RequestSender",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!SDKApi:type",
          "docComment": "/**\n * SDKApi represents the API of the SDK. On the init SDK transform configuration data to compose an API and apply interceptors to all methods. This requires a dynamic type mapping to provide the user with the best possible developer experience.\n *\n * The following type map understand the SDK configuration input and produce usable SDK api with all type hints.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SDKApi<Config extends "
            },
            {
              "kind": "Reference",
              "text": "SDKConfig",
              "canonicalReference": "@vue-storefront/sdk!SDKConfig:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [ExtensionName in keyof Config]: Config[ExtensionName][\"extend\"] & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<Config[ExtensionName][\"override\"], keyof Config[ExtensionName][\"extend\"]> & "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<Config[ExtensionName][\"connector\"], keyof Config[ExtensionName][\"override\"] & keyof Config[ExtensionName][\"extend\"]>;\n} & {\n    +readonly [ExtensionName in keyof Config]: {\n        utils: {\n            +readonly [Method in keyof Config[ExtensionName][\"utils\"]]: Config[ExtensionName][\"utils\"][Method];\n        };\n    };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "SDKApi",
          "typeParameters": [
            {
              "typeParameterName": "Config",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!SDKConfig:type",
          "docComment": "/**\n * SDKConfig represents the configuration and the API of the SDK.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type SDKConfig = "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": "> & "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "Extension",
              "canonicalReference": "@vue-storefront/sdk!Extension:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Module",
              "canonicalReference": "@vue-storefront/sdk!Module:type"
            },
            {
              "kind": "Content",
              "text": ">>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "SDKConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 13
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@vue-storefront/sdk!Subscribers:type",
          "docComment": "/**\n * Subscribers are declarative callbacks that are called when an event is emitted.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type Subscribers = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "EventCallback",
              "canonicalReference": "@vue-storefront/sdk!EventCallback:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EventCallback",
              "canonicalReference": "@vue-storefront/sdk!EventCallback:type"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types/index.ts",
          "releaseTag": "Public",
          "name": "Subscribers",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 9
          }
        }
      ]
    }
  ]
}
